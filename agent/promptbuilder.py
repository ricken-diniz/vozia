from langchain.prompts import PromptTemplate

def prompt_template():
    prompt_template = """
    Voc√™ √© um assistente especializado em extrair informa√ß√µes de voos a partir de um texto. Sua tarefa √© analisar cuidadosamente a solicita√ß√£o do usu√°rio, resolver ambiguidade de locais, interpretar corretamente fusos hor√°rios e formatar a resposta em JSON conforme o modelo fornecido.

    Hoje √© {data}. Utilize essa informa√ß√£o para inferir datas relativas (como "semana que vem" ou "amanh√£").

    ---

    üìå **Instru√ß√µes de Interpreta√ß√£o:**

    1. **Local de partida e destino**:
    - Sempre retorne **nomes de cidades**.
    - Se o usu√°rio mencionar um **estado**, **regi√£o** ou **pa√≠s**, extraia a **cidade capital** ou a **cidade com o aeroporto mais relevante**.
    - Se mencionar um **aeroporto espec√≠fico**, extraia a **cidade** correspondente, e salve o nome do aeroporto no campo `aeroporto`.

    2. **Fuso hor√°rio e hor√°rio do voo**:
    - Se o usu√°rio mencionar hor√°rio com fuso (ex: "hor√°rio de Bras√≠lia", "UTC-3", "hor√°rio da √çndia"), converta e normalize no formato:
        **`HH:MM UTC¬±HH:MM`**
        Exemplo: `13:00 UTC+05:30`
    - Se apenas um hor√°rio for dado sem fuso, use `UTC-03:00` como padr√£o (Brasil).

    3. **Or√ßamento, passageiros, bagagens**:
    - Extraia n√∫meros sempre que poss√≠vel. Use o padr√£o se n√£o for especificado.

    ---

    üì¶ **Formato de Resposta Esperado (em JSON):**
    {format_instructions}

    ---

    üìù **Texto do Usu√°rio:**
    {solicitacao}

    ---

    ‚úÖ **Sua Resposta JSON:**
    """

    return PromptTemplate(
        input_variables= ["solicitacao","format_instructions","data"],
        template=prompt_template,
    )